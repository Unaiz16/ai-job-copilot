
import express, { Request, Response, NextFunction } from 'express';
import dotenv from 'dotenv';
import cors from 'cors';
import { supabase } from './supabaseClient';

dotenv.config();

const app = express();
const port = process.env.PORT || 3001;

// Middlewares
app.use(express.json({ limit: '10mb' }));
app.use(cors());

// --- API ROUTES ---

// Health Check
app.get('/api', (req: Request, res: Response) => {
  res.status(200).send('AI Job Copilot Backend is running!');
});

// Middleware to check for DB connection
const checkDbConnection = (req: Request, res: Response, next: NextFunction) => {
  if (!supabase) {
    return res.status(503).json({ message: 'Database service is not configured on the server. Please check backend environment variables.' });
  }
  next();
};


// --- Data Persistence Routes ---
const dataRouter = express.Router();

const DUMMY_USER_ID = 1; // Corresponds to the single profile row with id=1
const DUMMY_USER_UUID = '00000000-0000-0000-0000-000000000000'; // For tables with UUID foreign key

// Profile
dataRouter.get('/profile', async (req: Request, res: Response) => {
    const { data, error } = await supabase!.from('profiles').select('*').eq('id', DUMMY_USER_ID).single();
    if (error && error.code !== 'PGRST116') { // Ignore 'exact one row not found'
        console.error('Error fetching profile:', error);
        return res.status(500).json({ message: error.message });
    }
    res.status(200).json(data);
});

dataRouter.post('/profile', async (req: Request, res: Response) => {
    const profileData = req.body;
    const { data, error } = await supabase!.from('profiles').upsert({ ...profileData, id: DUMMY_USER_ID }).select().single();
    if (error) {
        console.error('Error saving profile:', error);
        return res.status(500).json({ message: error.message });
    }
    res.status(200).json(data);
});

// Generic function for handling data sync (applications, experiments)
const syncTable = async (req: Request, res: Response, tableName: string) => {
    const items = req.body;
    
    // 1. Delete all items for the user
    const { error: deleteError } = await supabase!.from(tableName).delete().eq('user_id', DUMMY_USER_UUID);
    if (deleteError) {
        console.error(`Error deleting from ${tableName}:`, deleteError);
        return res.status(500).json({ message: `Failed to clear old ${tableName}` });
    }

    // 2. Insert new items
    if (items && items.length > 0) {
        const itemsToInsert = items.map((item: any) => ({ ...item, user_id: DUMMY_USER_UUID }));
        const { data, error: insertError } = await supabase!.from(tableName).insert(itemsToInsert).select();
        if (insertError) {
            console.error(`Error inserting into ${tableName}:`, insertError);
            return res.status(500).json({ message: `Failed to save new ${tableName}` });
        }
        return res.status(200).json(data);
    }

    return res.status(200).json([]);
};

// Applications
dataRouter.get('/applications', async (req: Request, res: Response) => {
    const { data, error } = await supabase!.from('applications').select('*').eq('user_id', DUMMY_USER_UUID);
    if (error) return res.status(500).json({ message: error.message });
    res.status(200).json(data);
});
dataRouter.post('/applications', (req: Request, res: Response) => syncTable(req, res, 'applications'));

// Experiments
dataRouter.get('/experiments', async (req: Request, res: Response) => {
    const { data, error } = await supabase!.from('experiments').select('*').eq('user_id', DUMMY_USER_UUID);
    if (error) return res.status(500).json({ message: error.message });
    res.status(200).json(data);
});
dataRouter.post('/experiments', (req: Request, res: Response) => syncTable(req, res, 'experiments'));

app.use('/api/data', checkDbConnection, dataRouter);


// --- Mock AI and Automation Routes (to be replaced later) ---

const MOCK_PROFILE_EXTRACTION = {
    name: "Jane Doe (from CV)", summary: "A professional with experience...",
    keySkills: "Node.js, TypeScript, React, APIs", jobRoles: "Backend Developer",
    locations: "Remote, Germany", yearsOfExperience: "8+ years",
};

const aiRouter = express.Router();
aiRouter.post('/generate-jobs', (req: Request, res: Response) => res.status(200).json({ jobs: [{ id: 'backend-job-1', company: 'Backend Corp', title: 'Node.js Developer', location: 'Remote', description: 'A job from our new backend!', salary: 'â‚¬80,000' }] }));
aiRouter.post('/generate-cv', (req: Request, res: Response) => res.status(200).json({ text: `/* This CV was generated by the secure backend */` }));
aiRouter.post('/generate-cover-letter', (req: Request, res: Response) => res.status(200).json({ text: `/* This Cover Letter was generated by the secure backend */` }));
aiRouter.post('/extract-profile', (req: Request, res: Response) => res.status(200).json(MOCK_PROFILE_EXTRACTION));
aiRouter.post('/clarifying-questions', (req: Request, res: Response) => res.status(200).json({ text: "This is a mock clarifying question from the backend." }));
aiRouter.post('/suggest-roles', (req: Request, res: Response) => res.status(200).json({ roles: ["Backend Engineer", "API Developer"] }));
aiRouter.post('/interview-prep', (req: Request, res: Response) => res.status(200).json({ text: "## Mock Interview Prep\n\nThis prep kit was generated by the backend." }));
aiRouter.post('/analyze-audio', (req: Request, res: Response) => res.status(200).json({ text: "## Mock Audio Analysis\n\nYour answer was clear and concise (from backend)." }));
aiRouter.post('/performance-insights', (req: Request, res: Response) => res.status(200).json({ positivePatterns: [], improvementAreas: [], proactiveSuggestion: "Focus on backend roles." }));
app.use('/api/ai', aiRouter);

const automationRouter = express.Router();
automationRouter.post('/easy-apply', (req: Request, res: Response) => res.status(200).json({ success: false, log: ['[BE-INFO] not supported for Easy Apply'] }));
automationRouter.post('/complex-apply', (req: Request, res: Response) => res.status(200).json({ success: true, log: ['[BE-INFO] Mock complex apply successful.'] }));
app.use('/api/automation', automationRouter);

const gdriveRouter = express.Router();
gdriveRouter.post('/save-file', (req: Request, res: Response) => res.status(200).json({ url: `https://docs.google.com/document/d/backend-fake/edit` }));
gdriveRouter.post('/create-sheet', (req: Request, res: Response) => res.status(200).json({ id: `sheet_backend_fake`, url: `https://docs.google.com/spreadsheets/d/sheet_backend_fake/edit` }));
gdriveRouter.post('/sync-to-sheet', (req: Request, res: Response) => res.status(200).json({ success: true }));
gdriveRouter.post('/sync-from-sheet', (req: Request, res: Response) => res.status(200).json({ applications: [] }));
app.use('/api/gdrive', gdriveRouter);


// Start the server
app.listen(port, () => {
  console.log(`[server]: Server is running at http://localhost:${port}`);
});
